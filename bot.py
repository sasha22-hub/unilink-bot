import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç .env –µ—Å–ª–∏ –µ—Å—Ç—å

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("TOKEN environment variable is not set")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

ads = []
discounts = [
    {"title": "–ö–æ—Ñ–µ–π–Ω—è ‚ÄúBeans‚Äù", "desc": "10% –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º—É!"},
    {"title": "–ö–æ–ø–∏-—Ü–µ–Ω—Ç—Ä ‚ÄúPrint+‚Äù", "desc": "15% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—á–∞—Ç—å –¥–∏–ø–ª–æ–º–æ–≤."},
    {"title": "–ö–æ—Ñ–µ–π–Ω—è ‚ÄúCoffee Like‚Äù", "desc": "10% –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º—É!"}
]

def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", "üíº –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    keyboard.add("üéì –°–∫–∏–¥–∫–∏", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    keyboard.add("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    return keyboard

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ UniLink ‚Äî –±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ë—É–∑—É–ª—É–∫–∞.
–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_keyboard())

@dp.message_handler(lambda message: message.text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è")
async def show_ads(message: types.Message):
    if not ads:
        await message.answer("–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å —Å–≤–æ—ë!")
    else:
        text = "\n\n".join([f"üìå {a['title']}\n{a['desc']}\n–ö–æ–Ω—Ç–∞–∫—Ç: {a['contact']}" for a in ads])
        await message.answer(text)

@dp.message_handler(lambda message: message.text == "üíº –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_ad(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–æ–Ω—Ç–∞–∫—Ç")

@dp.message_handler(lambda message: "|" in message.text)
async def save_ad(message: types.Message):
    parts = message.text.split("|")
    if len(parts) == 3:
        ads.append({"title": parts[0].strip(), "desc": parts[1].strip(), "contact": parts[2].strip()})
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–æ–Ω—Ç–∞–∫—Ç")

@dp.message_handler(lambda message: message.text == "üéì –°–∫–∏–¥–∫–∏")
async def show_discounts(message: types.Message):
    text = "\n\n".join([f"üéÅ {d['title']}\n{d['desc']}" for d in discounts])
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö.")

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
async def about(message: types.Message):
    await message.answer("üéì UniLink ‚Äî —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ë—É–∑—É–ª—É–∫–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –∏—Å–∫–∞—Ç—å –ø–æ–º–æ—â—å –∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö –æ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
